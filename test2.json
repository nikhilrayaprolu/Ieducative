Socket {
	nsp: 
		Namespace {
			name: '/',
			server: 
				Server {
					nsps: [Object],
					_path: '/socket.io',
					_serveClient: true,
					_adapter: [Function: Adapter],
					_origins: '*:*',
					sockets: [Circular],
					eio: [Object],
					httpServer: [Object],
					engine: [Object] },
			sockets: { '/#i_i2MQTEnLg6Wd4qAAAA': [Circular] },
			connected: { '/#i_i2MQTEnLg6Wd4qAAAA': [Circular] },
			fns: [],
			ids: 0,
			adapter: 
				Adapter {
					nsp: [Circular],
					rooms: [Object],
					sids: [Object],
					encoder: Encoder {} },
			_events: { connection: [Function] },
			_eventsCount: 1 },
			  server: 
				  Server {
					  nsps: { '/': [Object] },
					  _path: '/socket.io',
					  _serveClient: true,
					  _adapter: [Function: Adapter],
					  _origins: '*:*',
					  sockets: 
						  Namespace {
							  name: '/',
							  server: [Circular],
							  sockets: [Object],
							  connected: [Object],
							  fns: [],
							  ids: 0,
							  adapter: [Object],
							  _events: [Object],
							  _eventsCount: 1 },
					  eio: 
						  Server {
							  clients: [Object],
							  clientsCount: 1,
							  pingTimeout: 60000,
							  pingInterval: 25000,
							  upgradeTimeout: 10000,
							  maxHttpBufferSize: 100000000,
							  transports: [Object],
							  allowUpgrades: true,
							  allowRequest: [Function: bound ],
							  cookie: 'io',
							  cookiePath: false,
							  perMessageDeflate: [Object],
							  httpCompression: [Object],
							  ws: [Object],
							  _events: [Object],
							  _eventsCount: 1 },
					  httpServer: 
						  Server {
							  domain: null,
							  _events: [Object],
							  _eventsCount: 5,
							  _maxListeners: undefined,
							  _connections: 4,
							  _handle: [Object],
							  _usingSlaves: false,
							  _slaves: [],
							  _unref: false,
							  allowHalfOpen: true,
							  pauseOnConnect: false,
							  httpAllowHalfOpen: false,
							  timeout: 120000,
							  _pendingResponseData: 0,
							  _connectionKey: '6::::8080' },
					  engine: 
						  Server {
							  clients: [Object],
							  clientsCount: 1,
							  pingTimeout: 60000,
							  pingInterval: 25000,
							  upgradeTimeout: 10000,
							  maxHttpBufferSize: 100000000,
							  transports: [Object],
							  allowUpgrades: true,
							  allowRequest: [Function: bound ],
							  cookie: 'io',
							  cookiePath: false,
							  perMessageDeflate: [Object],
							  httpCompression: [Object],
							  ws: [Object],
							  _events: [Object],
							  _eventsCount: 1 } },
			  adapter: 
				  Adapter {
					  nsp: 
						  Namespace {
							  name: '/',
							  server: [Object],
							  sockets: [Object],
							  connected: [Object],
							  fns: [],
							  ids: 0,
							  adapter: [Circular],
							  _events: [Object],
							  _eventsCount: 1 },
					  rooms: { '0': [Object], '/#i_i2MQTEnLg6Wd4qAAAA': [Object] },
					  sids: { '/#i_i2MQTEnLg6Wd4qAAAA': [Object] },
					  encoder: Encoder {} },
			  id: '/#i_i2MQTEnLg6Wd4qAAAA',
			  client: 
				  Client {
					  server: 
						  Server {
							  nsps: [Object],
							  _path: '/socket.io',
							  _serveClient: true,
							  _adapter: [Function: Adapter],
							  _origins: '*:*',
							  sockets: [Object],
							  eio: [Object],
							  httpServer: [Object],
							  engine: [Object] },
					  conn: 
						  Socket {
							  id: 'i_i2MQTEnLg6Wd4qAAAA',
							  server: [Object],
							  upgrading: true,
							  upgraded: false,
							  readyState: 'open',
							  writeBuffer: [],
							  packetsFn: [],
							  sentCallbackFn: [],
							  cleanupFn: [Object],
							  request: [Object],
							  remoteAddress: '::ffff:127.0.0.1',
							  checkIntervalTimer: [Object],
							  upgradeTimeoutTimer: [Object],
							  pingTimeoutTimer: [Object],
							  transport: [Object],
							  _events: [Object],
							  _eventsCount: 3 },
					  encoder: Encoder {},
					  decoder: Decoder { reconstructor: null, _callbacks: [Object] },
					  id: 'i_i2MQTEnLg6Wd4qAAAA',
					  request: 
						  IncomingMessage {
							  _readableState: [Object],
							  readable: false,
							  domain: null,
							  _events: {},
							  _eventsCount: 0,
							  _maxListeners: undefined,
							  socket: [Object],
							  connection: [Object],
							  httpVersionMajor: 1,
							  httpVersionMinor: 1,
							  httpVersion: '1.1',
							  complete: true,
							  headers: [Object],
							  rawHeaders: [Object],
							  trailers: {},
							  rawTrailers: [],
							  upgrade: false,
							  url: '/socket.io/?EIO=3&transport=polling&t=LMMRGbb',
							  method: 'GET',
							  statusCode: null,
							  statusMessage: null,
							  client: [Object],
							  _consuming: true,
							  _dumped: true,
							  _query: [Object],
							  res: [Object],
							  cleanup: [Function: cleanup],
							  read: [Function] },
					  onclose: [Function: bound ],
					  ondata: [Function: bound ],
					  onerror: [Function: bound ],
					  ondecoded: [Function: bound ],
					  sockets: { '/#i_i2MQTEnLg6Wd4qAAAA': [Circular] },
					  nsps: { '/': [Circular] },
					  connectBuffer: [] },
			  conn: 
				  Socket {
					  id: 'i_i2MQTEnLg6Wd4qAAAA',
					  server: 
						  Server {
							  clients: [Object],
							  clientsCount: 1,
							  pingTimeout: 60000,
							  pingInterval: 25000,
							  upgradeTimeout: 10000,
							  maxHttpBufferSize: 100000000,
							  transports: [Object],
							  allowUpgrades: true,
							  allowRequest: [Function: bound ],
							  cookie: 'io',
							  cookiePath: false,
							  perMessageDeflate: [Object],
							  httpCompression: [Object],
							  ws: [Object],
							  _events: [Object],
							  _eventsCount: 1 },
					  upgrading: true,
					  upgraded: false,
					  readyState: 'open',
					  writeBuffer: [],
					  packetsFn: [],
					  sentCallbackFn: [],
					  cleanupFn: [ [Function], [Function] ],
					  request: 
						  IncomingMessage {
							  _readableState: [Object],
							  readable: false,
							  domain: null,
							  _events: {},
							  _eventsCount: 0,
							  _maxListeners: undefined,
							  socket: [Object],
							  connection: [Object],
							  httpVersionMajor: 1,
							  httpVersionMinor: 1,
							  httpVersion: '1.1',
							  complete: true,
							  headers: [Object],
							  rawHeaders: [Object],
							  trailers: {},
							  rawTrailers: [],
							  upgrade: false,
							  url: '/socket.io/?EIO=3&transport=polling&t=LMMRGbb',
							  method: 'GET',
							  statusCode: null,
							  statusMessage: null,
							  client: [Object],
							  _consuming: true,
							  _dumped: true,
							  _query: [Object],
							  res: [Object],
							  cleanup: [Function: cleanup],
							  read: [Function] },
					  remoteAddress: '::ffff:127.0.0.1',
					  checkIntervalTimer: 
					  { _called: false,
						  _idleTimeout: 100,
						  _idlePrev: [Object],
						  _idleNext: [Object],
						  _idleStart: 5392,
						  _onTimeout: [Function: wrapper],
						  _repeat: [Function: check] },
					  upgradeTimeoutTimer: 
					  { _called: false,
						  _idleTimeout: 10000,
						  _idlePrev: [Object],
						  _idleNext: [Object],
						  _idleStart: 5276,
						  _onTimeout: [Function],
						  _repeat: null },
					  pingTimeoutTimer: 
					  { _called: false,
						  _idleTimeout: 85000,
						  _idlePrev: [Object],
						  _idleNext: [Object],
						  _idleStart: 5420,
						  _onTimeout: [Function],
						  _repeat: null },
					  transport: 
						  XHR {
							  readyState: 'open',
							  discarded: false,
							  closeTimeout: 30000,
							  maxHttpBufferSize: 100000000,
							  httpCompression: [Object],
							  supportsBinary: true,
							  _events: [Object],
							  _eventsCount: 5,
							  sid: 'i_i2MQTEnLg6Wd4qAAAA',
							  req: [Object],
							  res: [Object],
							  writable: true,
							  dataReq: [Object],
							  dataRes: [Object] },
					  _events: 
					  { close: [Object],
						  data: [Function: bound ],
						  error: [Function: bound ] },
					  _eventsCount: 3 },
			  rooms: { '/#i_i2MQTEnLg6Wd4qAAAA': '/#i_i2MQTEnLg6Wd4qAAAA' },
			  acks: {},
			  connected: true,
			  disconnected: false,
			  handshake: 
			  { headers: 
				  { host: 'localhost:8080',
					  'user-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:47.0) Gecko/20100101 Firefox/47.0',
					  accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
													    'accept-language': 'en-US,en;q=0.5',
													    'accept-encoding': 'gzip, deflate',
													    referer: 'http://localhost:8080/notifications',
													    cookie: 'io=KJ8GfsNczvLfTAZPAAAA; csrftoken=D2krM0o7GHn5wL2QgWcDIjMAszioxanE; _ga=GA1.1.670588538.1466332591',
													    connection: 'keep-alive' },
													    time: 'Tue Jun 28 2016 15:22:56 GMT+0530 (IST)',
													    address: '::ffff:127.0.0.1',
													    xdomain: false,
													    secure: false,
													    issued: 1467107576201,
													    url: '/socket.io/?EIO=3&transport=polling&t=LMMRGbb',
													    query: { EIO: '3', transport: 'polling', t: 'LMMRGbb' } },
													    _events: 
													    { room: [Function],
													    username: [Function],
													    disconnect: [Function],
													    newnotification: [Function] },
													    _eventsCount: 4,
													    username: 'nikhilra' }
